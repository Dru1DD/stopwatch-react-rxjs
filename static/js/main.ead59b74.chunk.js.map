{"version":3,"sources":["redux/action/actionTypes.ts","components/Statistic.tsx","components/App.tsx","redux/reducer/post.ts","redux/store.ts","index.tsx"],"names":["IS_STOPWATCH_START","IS_STOPWATCH_STOP","IS_STOPWATCH_WEIT","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Statistic","list","useSelector","state","undefined","stopwatchesList","length","className","data","labels","datasets","label","fill","backgroundColor","borderColor","App","useState","time","setTime","status","setStatus","modalOpen","setModalOpen","clickTimeout","dispatch","useDispatch","useEffect","unsubscribe$","Subject","interval","pipe","takeUntil","subscribe","prev","next","complete","startHandler","useCallback","type","stopHandler","a","payload","pauseHandler","clearTimeout","setTimeout","resetHandler","Date","toISOString","slice","onClick","initialState","isStopwatchStart","isStopwatchStop","isStopwatchWeit","store","createStore","action","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ead59b74.chunk.js","sourcesContent":["export const IS_STOPWATCH_START = \"IS_STOPWATCH_START\"\r\nexport const IS_STOPWATCH_STOP = \"IS_STOPWATCH_STOP\"\r\nexport const IS_STOPWATCH_WEIT = \"IS_STOPWATCH_WEIT\"","import React, {\r\n    FunctionComponent\r\n} from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n  } from 'chart.js'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nimport { IState } from '../redux/reducer/post'\r\n\r\ninterface IDatasetItem {\r\n    label: string,\r\n    data: number[],\r\n    fill: boolean,\r\n    backgroundColor: string,\r\n    borderColor: string\r\n}\r\ninterface IData {\r\n    labels: string[],\r\n    datasets: IDatasetItem[]\r\n}\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  )\r\nexport const Statistic: FunctionComponent = () => {\r\n\r\n    const list = useSelector((state: IState) => state !== undefined ? state.stopwatchesList : null)\r\n    if( !list || !list.length) {\r\n        return (\r\n            <h3 className=\"ui header\">No statistic yet</h3>\r\n        )\r\n    }\r\n\r\n    const data: IData = {\r\n        labels: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\r\n        datasets: [{\r\n            label: \"Duration of use of the stopwatch\",\r\n            data: list,\r\n            fill: true,\r\n            backgroundColor: \"rgba(75,192,192,0.2)\",\r\n            borderColor: \"rgba(75,192,192,1)\"\r\n        }]\r\n    }\r\n    \r\n    \r\n    return (\r\n        <Line data={data} />\r\n    )\r\n}\r\n","import React, {\n   useState, \n   useEffect,\n   useCallback, \n   FunctionComponent, \n} from 'react';\nimport { \n  Subject,\n  interval\n} from 'rxjs'\nimport {\n  takeUntil\n} from 'rxjs/operators'\n// import moment from 'moment'\nimport '../styles/App.css'\n\nimport {\n  IS_STOPWATCH_START,\n  IS_STOPWATCH_STOP,\n  IS_STOPWATCH_WEIT\n} from '../redux/action/actionTypes'\n\nimport { useDispatch } from 'react-redux'\nimport { Statistic } from './Statistic';\n\nconst clickTime: number = 300\n\ntype Status = \"run\" | \"stop\" | \"wait\"\n\n\nconst App: FunctionComponent = () => {\n  const [time, setTime] = useState<number>(0);\n  const [status, setStatus] = useState<Status>(\"stop\");\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n\n  let clickTimeout: any = null\n  const dispatch = useDispatch()\n\n\n  useEffect(() => {\n    const unsubscribe$ = new Subject()\n\n    interval(1000)\n      .pipe(takeUntil(unsubscribe$))\n      .subscribe(() => {\n        if(status === \"run\") {\n          setTime(prev => prev + 1000)\n        }\n      })\n    return () => {\n      unsubscribe$.next(status)\n      unsubscribe$.complete()\n    }\n  }, [status])\n\n  const startHandler = useCallback(() => {\n    setStatus(\"run\")\n    dispatch({ type: IS_STOPWATCH_START })\n  }, [dispatch])\n\n  const stopHandler = useCallback(async () => {\n    await dispatch({\n      type: IS_STOPWATCH_STOP,\n      payload: time\n    })\n    setStatus(\"stop\")\n    setTime(0)\n  }, [dispatch, time])\n\n  const pauseHandler = useCallback(() => {\n    if(clickTimeout) {\n      clearTimeout(clickTimeout)\n      clickTimeout = null\n      setStatus(\"wait\")\n      dispatch({ type: IS_STOPWATCH_WEIT})\n    } else {\n      clickTimeout = setTimeout(() => {\n        clickTimeout = null\n      }, clickTime)\n    } \n  }, [dispatch])\n\n  const resetHandler = useCallback(async () => {\n    await dispatch({\n      type: IS_STOPWATCH_STOP,\n      payload: time\n    })\n    setTime(0)\n    setStatus(\"run\")\n  }, [dispatch, time])\n\n  return (\n    <div className=\"ui container\">\n      <div className=\"ui segment\">\n        <h1 className=\"ui header\">Stopwatch Test Task</h1>\n      </div>\n      <div className=\"ui segment\">\n        {/* <h2 className=\"ui header\">{moment(new Date(time)).format('HH:mm:ss')}</h2> */}\n        <h2 className=\"ui header\">{new Date(time).toISOString().slice(11, 19)}</h2>\n        <div className=\"ui group\">\n          { status === \"stop\" ? (\n             <button\n            className=\"ui button primary\"\n            onClick={startHandler}\n          > Start </button>\n          ) : status === \"wait\" ? \n          (\n            <button\n           className=\"ui button primary\"\n           onClick={startHandler}\n         > Start </button>\n         )\n          :(\n            <button \n            className=\"ui button red\"\n            onClick={stopHandler}\n          > Stop </button>\n          )}\n          <button\n            className=\"ui button secondary\"\n            onClick={pauseHandler}\n          > Wait </button>\n          <button\n            className=\"ui button\"\n            onClick={resetHandler}\n          > Reset </button>\n          <button\n            className=\"ui grey button\"\n            onClick={() => setModalOpen(!modalOpen)}  \n          >Info</button>\n        </div> \n        {\n          modalOpen && <Statistic />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n    IS_STOPWATCH_START,\r\n    IS_STOPWATCH_STOP,\r\n    IS_STOPWATCH_WEIT\r\n} from '../action/actionTypes'\r\n\r\ninterface ISSTOPWACHSTART {\r\n    type: typeof IS_STOPWATCH_START,\r\n}\r\n\r\n\r\ninterface ISSTOPWATCHSTOP {\r\n    type: typeof IS_STOPWATCH_STOP,\r\n    payload: number\r\n}\r\n\r\ninterface ISSTOPWATCHWEIT {\r\n    type: typeof IS_STOPWATCH_WEIT\r\n}\r\n\r\n export interface IState {\r\n    isStopwatchStart: boolean\r\n    isStopwatchStop: boolean\r\n    isStopwatchWeit: boolean\r\n    stopwatchesList: number[]\r\n}\r\n\r\n\r\nexport const initialState: IState = {\r\n    isStopwatchStart: false,\r\n    isStopwatchStop: true,\r\n    isStopwatchWeit: false,\r\n    stopwatchesList: []\r\n}\r\n\r\ntype ActionType = ISSTOPWACHSTART | ISSTOPWATCHSTOP | ISSTOPWATCHWEIT\r\n\r\nexport const postReducer = (state: IState = initialState, action: ActionType) => {\r\n    switch(action.type) {\r\n        case IS_STOPWATCH_START: \r\n            return {\r\n                ...state,\r\n                isStopwatchStart: true,\r\n                isStopwatchStop: false,\r\n                isStopwatchWeit: false\r\n            }\r\n        case IS_STOPWATCH_STOP:\r\n            return {\r\n                ...state,\r\n                isStopwatchStart: false,\r\n                isStopwatchStop: true,\r\n                isStopwatchWeit: false,\r\n                stopwatchesList: [...state.stopwatchesList, action.payload]\r\n            }\r\n        case IS_STOPWATCH_WEIT:\r\n            return {\r\n                ...state,\r\n                isStopwatchStart: false,\r\n                isStopwatchStop: false,\r\n                isStopwatchWeit: true\r\n            }\r\n    }\r\n}","import { createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { postReducer, initialState } from './reducer/post'\r\n\r\nconst store = createStore(\r\n    postReducer,\r\n    initialState,\r\n    composeWithDevTools()\r\n)\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}